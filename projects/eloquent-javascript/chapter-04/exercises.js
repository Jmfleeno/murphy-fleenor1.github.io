////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


var range = function(start, end, step) {
  var arr = [];
  if (start === end){
    return arr;
  }
  for (var i = start; step > 1 || step === undefined ? i <= end : i >= end; step ? i = i + step : i++)
      arr.push(i);
  return arr;
};



////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum (arr){
  var arrSum = 0;
  for (var i = 0; i<arr.length; i++){
  arrSum += arr[i];
  }
  return arrSum;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let outputArr = [];
  for (let i = array.length-1; i >= 0; i--) {
    outputArr.push(array[i]);
  }
  return outputArr
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  let reveresedArr = [];
  for (let i = array.length-1; i >= 0; i--){
    reveresedArr.push(array[i]);
  } 
  for (let j = 0; j < array.length; j++){
    array[j] = reveresedArr[j];
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let rest = null;
  for (let i = array.length-1; i >= 0; i--){
    rest = {
      value: array[i], 
      rest 
    }
  }
  return rest
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  //base case
  if (list.rest === null){
    return list.value;
  } else {
  //recursion
    return ([list.value].concat(listToArray(list.rest)));
  }
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend (element, list){
  var newList = {value: element, rest: list};
  return newList;
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth (list, num){
	var listArray = listToArray(list);
    return listArray[num];
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a, b) {
  //first compare with triple equals to see if the two are the same type and value
  if (a === b) return true;
  //second if statement checks for null values and non-objects
  if (a == null || typeof a != "object" ||
      b == null || typeof b != "object")
    return false;
  //declare counters
  var propsInA = 0, propsInB = 0;
	//for-in loop counts the number of properties in a and b
  for (var prop in a)
    propsInA += 1;

  for (var prop in b) {
    propsInB += 1;
    //if b has a prop not in a or if, upon recursive function all,
    //the properties don't have the same values, return false
    if (!(prop in a) || !deepEqual(a[prop], b[prop]))
      return false;
  }
	//otherwise, return whether the number of properties are the same
  return propsInA == propsInB;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
